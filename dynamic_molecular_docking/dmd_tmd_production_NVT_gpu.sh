#!/bin/bash



# GO WITH AMBER 12 YO!
source /apps11/bioinfp/amber12_centos58_intel1213_openmpi16_cuda5/setup.sh

err() {
    # Print error message to stderr.
    echo "$@" 1>&2;
    }


SCRIPTNAME="$(basename "$0")"

# Check number of given arguments:
if [ $# -ne 2 ]; then
    err "argument 1: the GPU ID to use or the number of CPUs to use."
    err "argument 2: gpu or cpu"
    exit 1
fi

PRMTOP="top.prmtop"
NUMBER="$1"
GPUCPU="$2"

test_number() {
    if ! [[ "${1}" =~ ^[0-9]+$ ]] ; then
        err "Not a number: ${1}. Exit."
        exit 1
    fi
    }

test_number ${NUMBER}

if [[ "${GPUCPU}" == "gpu" ]]; then
    echo "Setting up MD  on GPU ${NUMBER}."
    GPUID="${NUMBER}"
elif [[ "${GPUCPU}" == "cpu" ]]; then
    echo "Setting up MD on ${NUMBER} CPU cores."
    CPUNUMBER="${NUMBER}"
else
    err "argument must bei either 'gpu' or 'cpu'. Exit."
    exit 1
fi

CUDAENGINE="pmemd.cuda"
CPUENGINE="mpirun -np ${CPUNUMBER} pmemd.MPI"

# Define executables and file names.
if [[ "${GPUCPU}" == "gpu" ]]; then
    export CUDA_VISIBLE_DEVICES="${GPUID}"
    ENGINE=${CUDAENGINE}
elif [[ "${GPUCPU}" == "cpu" ]]; then
    ENGINE=${CPUENGINE}
fi

PRODPREFIX="dmd_tmd_production_NVT"
PRODINFILE="${PRODPREFIX}.in"

# check if all required files are available
check_required () {
    if [ ! -f $1 ]; then
       echo "file $1 is required and does not exist. exit." >&2
       exit 1
    fi
    }

EQUI_RST_FILE="equilibrate_NPT.rst"

check_required ${EQUI_RST_FILE}

# delete files that will be generated by this script
check_delete () {
    if [ -f $1 ]; then
       rm -f $1
    fi
    }
check_delete ${PRODINFILE}

echo "writing input file ${PRODINFILE} ..."
echo "
NVT production for N ns at 300 K.
This is a restart simulation (irest=1). Coords, velocities and box
information are read from inpcrd file (ntx=5).

ntb=1: constant volume periodic boundary conditions
ntc/ntf=2: SHAKE on hydrogens
temp0 = 300.0, ntt = 1, tautp=10.0: 300K, Berendsen thermostate. Comment by
Ross Walker:
I use a weak coupling (10ps) to approximate NVE. Setting this to
infinite would give you NVE. However, NVE can be tricky to get to work well
when running very long simulations. 2fs with shake is kind of bleeding edge
for NVE, you ideally have to tighten the shake tolerance the PME tolerances
and reduce the time step to get ideal energy conservation (although a good
test to be sure things are working properly). As such while NVT is more
expensive than NVE it is minor and when you add all the extra tolerances
needed for NVE, NVT ends up quicker. In my opinion this is a better option
than using langevin for the entire simulation as all of the issues with
simulation problems, NANs seen on the GPUs etc arise from running long ntt=3
simulations.

t ns simulation time at 2 fs = 0.002 ps time step requires N steps:
N = t * 10**-9 s / (0.002 * 10**-12 s) = 500000 * t

e.g. 16500000 steps -> 33 ns
e.g. 19000000 steps -> 38 ns
e.g.  5000000 steps -> 10 ns

ig: random seed
ioutfm=1: write binary (NetCDF) trajectory

4 ns (2000000 steps) of SMD

&cntrl
 ntx = 1,
 irest = 0,
 ntb = 1,
 cut = 8.0,
 ntc = 2,
 ntf = 2,
 tempi = 300.0,
 temp0 = 300.0,
 ntt = 1,
 tautp = 10.0,
 nstlim = 2000000,
 dt = 0.002,
 ntpr = 500, ntwx = 500, ntwr = 10000,
 ioutfm = 1,
 ig = -1,
 jar = 1,
/
&wt type='DUMPFREQ', istep1=100, /
&wt type='END', /
DISANG=dmd_production.rest
DUMPAVE=smd.out
LISTIN=POUT
LISTOUT=POUT
/
" > ${PRODINFILE}

echo
echo "content of ${PRODINFILE}:"
cat ${PRODINFILE}

print_run_command () {
    echo "running command:"
    echo "${1}"
    ${1}
    }

echo "starting tMD production..."
#echo "sourcing  /apps11/bioinfp/amber11_centos5_intel1213_openmpi15/setup.sh"
#source  /apps11/bioinfp/amber11_centos5_intel1213_openmpi15/setup.sh
#module load amber/11
touch PRODUCTION.RUNNING
echo $(hostname) > RUNNING.HOSTNAME
CMD="time ${ENGINE} -O -i ${PRODINFILE} -o ${PRODPREFIX}.out -p ${PRMTOP} -c ${EQUI_RST_FILE} -r ${PRODPREFIX}.rst -x ${PRODPREFIX}.mdcrd"
print_run_command "${CMD}"

if [ $? != 0 ]; then
    echo "Error during production. exit."
    exit 1
fi

check_delete PRODUCTION.RUNNING
check_delete RUNNING.HOSTNAME
check_delete PRODUCTION.PLANNED

echo "production MD finished."

