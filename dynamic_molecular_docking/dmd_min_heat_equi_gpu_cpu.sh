#!/bin/bash
#   Copyright (C) 2012 Jan-Philip Gehrcke
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


# GO WITH AMBER 12 YO!
source /apps11/bioinfp/amber12_centos58_intel1213_openmpi16_cuda5/setup.sh

err() {
    # Print error message to stderr.
    echo "$@" 1>&2;
    }

check_delete () {
    # Delete file if existing.
    if [ -f "${1}" ]; then
        echo "Deleting ${1} ..."
        rm -f "${1}"
    fi
    }

check_required () {
    # Check if file is available, exit if not.
    if [ ! -f "${1}" ]; then
       err "File ${1} is required and does not exist. Exit."
       exit 1
    fi
    }

print_run_command () {
    echo "Running command:"
    echo "${1}"
    ${1}
    }

SCRIPTNAME="$(basename "$0")"

# Check number of given arguments:
if [ $# -le 4 ]; then
    err "Usage: ${SCRIPTNAME} prmtopfile coordfile #_CPUS gpu/cpu GPU_ID"
    err "1st argument: the prmtop file of the system to minimize."
    err "2nd argument: the initial coord file of the system to minimize."
    err "3rd argument: the GPU ID to use or the number of CPUs to use."
    err "4th argument: gpu or cpu"
    err "5th argument: GPU ID (required if 4th arg is 'gpu')"
    exit 1
fi

PRMTOP="$1"
INITCRD="$2"
CPUNUMBER="$3"
GPUCPU="$4"
GPUID="$5"

test_number() {
    if ! [[ "${1}" =~ ^[0-9]+$ ]] ; then
        err "Not a number: ${1}. Exit."
        exit 1
    fi
    }

test_number ${CPUNUMBER}

if [[ "${GPUCPU}" == "gpu" ]]; then
    echo "Setting up MD of ${PRMTOP}/${INITCRD} on GPU ${CPUNUMBER}."
elif [[ "${GPUCPU}" == "cpu" ]]; then
    echo "Setting up MD of ${PRMTOP}/${INITCRD} on ${CPUNUMBER} CPU cores."
else
    err "4th argument must bei either 'gpu' or 'cpu'. Exit."
    exit 1
fi

if [[ "${GPUCPU}" == "gpu" ]]; then
    if [ $# != 5 ]; then
        err "5th argument missing: GPU ID (required if 4th arg is 'gpu')"
        exit 1
    fi
    test_number ${5}
fi

CUDAENGINE="pmemd.cuda"
CPUENGINE="mpirun -np ${CPUNUMBER} pmemd.MPI"

# Define executables and file names.
if [[ "${GPUCPU}" == "gpu" ]]; then
    export CUDA_VISIBLE_DEVICES="${GPUID}"
    ENGINE=${CUDAENGINE}
elif [[ "${GPUCPU}" == "cpu" ]]; then
    ENGINE=${CPUENGINE}
fi


MIN1PREFIX="min1"
MIN2PREFIX="min2"
MIN1FILE="${MIN1PREFIX}.in"
MIN2FILE="${MIN2PREFIX}.in"
HEATPREFIX="heatup_NVT"
HEATINFILE="${HEATPREFIX}.in"
EQUIPREFIX="equilibrate_NPT"
EQUIINFILE="${EQUIPREFIX}.in"
PRODPREFIX="production_NVT"
PRODINFILE="${PRODPREFIX}.in"

if [ -f core_atom_id ]; then
    CORE_ATOM_ID=$(cat core_atom_id)
else
    err "File 'core_atom_id' missing."
fi

if [ -f ligand_center_atom_id ]; then
    LIGAND_CENTER_ATOM_ID=$(cat ligand_center_atom_id)
else
    err "File 'ligand_center_atom_id' missing."
fi

if [ -f gaginternal.rest ]; then
    ADDITIONALREST="
&wt type='END'   /
DISANG=gaginternal.rest
LISTIN=POUT
LISTOUT=POUT
"
    NMROPT="1"
else
    ADDITIONALREST=""
    NMROPT="0"
fi


#                               MINIMIZATION
# ============================================================================
echo
echo ">>> MINIMIZATION"
# Check if required files are in place.
check_required ${PRMTOP}
check_required ${INITCRD}
# Delete files that will be generated by this script.
check_delete ${MIN1FILE}
check_delete ${MIN2FILE}


echo "Writing minimization input file ${MIN1FILE} ..."
echo "minimization 1
http://ambermd.org/tutorials/basic/tutorial1/section5.htm
Our minimization procedure will consist of a two stage approach.
In the first stage we will keep the SOLUTE fixed and just minimize
the positions of the water and ions. Then in the second stage we
will minimize the entire system.

steepest descent: ncyc, conjugate gradient: maxcyc-ncyc
ntb=1: periodic boundary conditions
ntr=1: restraints

&cntrl
 imin = 1,
 maxcyc = 1500,
 ncyc = 500,
 ntb = 1,
 ntr = 1,
 cut = 8.0
 ig = -1
 restraint_wt = 500.0,
 restraintmask = \"!:WAT\",
/
" > ${MIN1FILE}

echo "Writing minimization input file ${MIN2FILE} ..."
echo "Minimization 2
http://ambermd.org/tutorials/basic/tutorial1/section5.htm
Our minimization procedure will consist of a two stage approach.
In the first stage we will keep the SOLUTE fixed and just minimize
the positions of the water and ions. Then in the second stage we
will minimize the entire system.

Additional Heparin torsional restraints.

&cntrl
 imin = 1,
 maxcyc = 2500,
 ncyc = 1000,
 ntb = 1,
 ntr = 0,
 cut = 8.0,
 nmropt = ${NMROPT},
/${ADDITIONALREST}
" > ${MIN2FILE}


echo
echo "content of ${MIN1FILE}:"
cat ${MIN1FILE}
echo
echo "content of ${MIN2FILE}:"
cat ${MIN2FILE}


echo "Running first minimization (fixed solute)..."
CMD="time ${CPUENGINE} -O -i ${MIN1FILE} -o ${MIN1PREFIX}.out -p ${PRMTOP} \
     -c ${INITCRD} -r ${MIN1PREFIX}.rst -ref ${INITCRD}"
print_run_command "${CMD}"
if [ $? != 0 ]; then
    err "Error during first minimization. Exit."
    exit 1
fi
echo "Running second minimization (entire system is flexible)..."
CMD="time ${CPUENGINE} -O -i ${MIN2FILE} -o ${MIN2PREFIX}.out -p ${PRMTOP} \
     -c ${MIN1PREFIX}.rst -r ${MIN2PREFIX}.rst -ref ${INITCRD}"
print_run_command "${CMD}"
if [ $? != 0 ]; then
    err "Error during second minimization. Exit."
    exit 1
fi
echo "Minimizations done."
echo "Converting final coordinates to PDB file format..."
ambpdb -p ${PRMTOP} < ${MIN2PREFIX}.rst > aftermin.pdb
if [ -f aftermin.pdb ]; then
    echo "aftermin.pdb written."
else
    err "aftermin.pdb not created."
fi
echo "Minimization finished."


#                               HEATUP
# ============================================================================
echo
echo ">>> HEATUP"
check_required ${MIN2PREFIX}.rst
check_delete ${HEATINFILE}
echo "Writing input file ${HEATINFILE} ..."
echo "
Heating up the system to about 300 K in NVT ensemble during 20 ps.
As the density (especially of water) presumably is not the natural density,
this process must be kept very short in order to *not* create vacuum bubbles
in the water (Jason Swails & Ross Walker).

Starting from 0 temperature is not a good idea for this short amount of time.
200 K as starting temp is still very cold and therefore fine (C. Simmerling)

ntx=1: restart file and no initial velocities.
ntb=1: periodic boundary conditions constant volume
ntc/ntf=2: SHAKE on hydrogens
cutoff of 8 Angstrom
ntr=1: keep solute fixed (moderate positional restraint)
ntt=3: Langevin thermostate; gamma_ln: collision frequency

Keep medium positional restraint on entire solute.
Internal GAG restraints are not necessary in this step, I believe.

N=10000 -> 20 ps

&cntrl
 ntx = 1,
 ntb = 1,
 cut = 8.0,
 ntr = 1,
 ntc = 2,
 ntf = 2,
 tempi = 200,
 temp0 = 300,
 ntt = 3,
 gamma_ln = 1.0,
 nstlim = 10000, dt = 0.002,
 ntpr = 500, ntwx = 500, ntwr = 10000,
 ioutfm = 1,
 ig = -1,
 ntr = 1,
 restraint_wt = 30.0,
 restraintmask = \"!:WAT\",
/
" > ${HEATINFILE}
echo
echo "content of ${HEATINFILE}:"
cat ${HEATINFILE}
echo "Running heatup..."
CMD="time ${ENGINE} -O -i ${HEATINFILE} -o ${HEATPREFIX}.out -p ${PRMTOP} \
     -c ${MIN2PREFIX}.rst -r ${HEATPREFIX}.rst -x ${HEATPREFIX}.mdcrd \
     -ref ${MIN2PREFIX}.rst"
print_run_command "${CMD}"
if [ $? != 0 ]; then
    err "Error during heatup. Exit."
    exit 1
fi
echo "Heatup finished."


#                               EQUILIBRATION
# ============================================================================
echo
echo ">>> EQUILIBRATION"
check_required ${HEATPREFIX}.rst
check_delete ${EQUIINFILE}
echo "Writing input file ${EQUIINFILE} ..."

echo "
NPT equilibration for 0.5 ns at 300 K in order to relax the system to its
natural density and normal pressure. This is a restart simulation (irest=1)
and coords, velocities and box information are read from inpcrd file (ntx=5).

ntb=2: constant pressure periodic boundary conditions (p default 1.0)
ntp=1: isotropic pressure scaling (must be 1 or 2 for const. pressure dyn.)
taup=2: pressure relaxation time (ps), slightly slower than default (1 ps)
ntc/ntf=2: SHAKE on hydrogens
temp0 = 300.0, ntt = 3, gamma_ln = 1.0: 300K Langevin, collision freq: 1/ps

2 ns simulation time at 2 fs = 0.002 ps time step requires N steps:
N = 2 * 10**-9 s / (0.002 * 10**-12 s) = 1000000

1 ns: 500000
500 ps: 250000

ioutfm=1: write binary (NetCDF) trajectory

Fix protein core atom and GAG center atom to their initial coordinates as
stored in initcoords.crd with a quite strong harmonic potential.


Internal GAG restraints only if gaginternal.rest ist available.
(e.g. for Heparin torsional restraints)

&cntrl
 irest = 1, ntx = 5,
 ntb = 2, ntp = 1,
 taup = 2.0,
 cut = 8.0,
 ntc = 2, ntf = 2,
 temp0 = 300.0, ntt = 3, gamma_ln = 1.0,
 nstlim = 250000, dt = 0.002,
 ntpr = 500, ntwx = 500, ntwr = 10000,
 ioutfm = 1,
 nmropt = ${NMROPT},
 restraint_wt = 200.0,
 restraintmask = \"@${CORE_ATOM_ID},${LIGAND_CENTER_ATOM_ID}\",
/${ADDITIONALREST}
" > ${EQUIINFILE}
echo
echo "content of ${EQUIINFILE}:"
cat ${EQUIINFILE}

echo "Running equilibration..."
CMD="time ${ENGINE} -O -i ${EQUIINFILE} -o ${EQUIPREFIX}.out -p ${PRMTOP} \
     -c ${HEATPREFIX}.rst -r ${EQUIPREFIX}.rst -x ${EQUIPREFIX}.mdcrd"
# deleted -ref initcoords.crd"
print_run_command "${CMD}"
if [ $? != 0 ]; then
    err "Error during equilibration. Exit."
    exit 1
fi
echo "Equilibration finished."

# Stop for now.
exit 0

#                               PRODUCTION
# ============================================================================
echo
echo ">>> PRODUCTION"
check_required ${EQUIPREFIX}.rst
check_delete ${PRODINFILE}
echo "Writing input file ${PRODINFILE} ..."
echo "
NVT production for N ns at 300 K.
This is a restart simulation (irest=1). Coords, velocities and box
information are read from inpcrd file (ntx=5).

ntb=1: constant volume periodic boundary conditions
ntc/ntf=2: SHAKE on hydrogens
temp0 = 300.0, ntt = 1, tautp=10.0: 300K, Berendsen thermostate. Comment by
Ross Walker:
I use a weak coupling (10ps) to approximate NVE. Setting this to
infinite would give you NVE. However, NVE can be tricky to get to work well
when running very long simulations. 2fs with shake is kind of bleeding edge
for NVE, you ideally have to tighten the shake tolerance the PME tolerances
and reduce the time step to get ideal energy conservation (although a good
test to be sure things are working properly). As such while NVT is more
expensive than NVE it is minor and when you add all the extra tolerances
needed for NVE, NVT ends up quicker. In my opinion this is a better option
than using langevin for the entire simulation as all of the issues with
simulation problems, NANs seen on the GPUs etc arise from running long ntt=3
simulations.

t ns simulation time at 2 fs = 0.002 ps time step requires N steps:
N = t * 10**-9 s / (0.002 * 10**-12 s) = 500000 * t

e.g. 16500000 steps -> 33 ns
e.g. 19000000 steps -> 38 ns
e.g.  5000000 steps -> 10 ns
e.g. 10000000 steps -> 20 ns

ioutfm=1: write binary (NetCDF) trajectory

Additional restraints if necessary.

&cntrl
 irest = 1, ntx = 5,
 ntb = 1,
 cut = 8.0,
 ntc = 2, ntf = 2,
 temp0 = 300.0, ntt = 1, tautp = 10.0,
 nstlim = 5000000, dt = 0.002,
 ntpr = 500, ntwx = 500, ntwr = 10000,
 ioutfm = 1,
 nmropt = 1,
/
&wt type='END'   /
DISANG=gaginternal.rest
LISTIN=POUT
LISTOUT=POUT
" > ${PRODINFILE}
echo
echo "content of ${PRODINFILE}:"
cat ${PRODINFILE}
echo "Running production..."
CMD="time ${ENGINE} -O -i ${PRODINFILE} -o ${PRODPREFIX}.out -p ${PRMTOP} \
     -c ${EQUIPREFIX}.rst -r ${PRODPREFIX}.rst -x ${PRODPREFIX}.mdcrd"
print_run_command "${CMD}"
if [ $? != 0 ]; then
    err "Error during production. Exit."
    exit 1
fi
echo "Production finished."



